name: Deploy TODO API to AWS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  DOTNET_VERSION: '8.0.x'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Debug repo structure
        run: |
          pwd
          ls -R

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore src/ToDoApi/todo-serverless.csproj

      - name: Build
        run: dotnet build src/ToDoApi/todo-serverless.csproj --configuration Release --no-restore

      - name: Run tests
        if: hashFiles('src/ToDoApi.Tests/**') != ''
        run: dotnet test src/ToDoApi.Tests/todo-serverless.Tests.csproj --no-build --verbosity normal

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::506279660688:role/GitHubActionsDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup SAM CLI
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: SAM Build
        run: sam build --template-file template.yml

      - name: SAM Deploy
        if: github.ref == 'refs/heads/main'
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --stack-name todo-serverless-stack \
            --region ${{ env.AWS_REGION }} \
            --capabilities CAPABILITY_IAM \
            --resolve-s3

      - name: Get API URL
        if: github.ref == 'refs/heads/main'
        id: get-url
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name todo-serverless-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
            --output text)
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT
          echo "üöÄ API deployed to: $API_URL"

      - name: Deploy TODO App to S3
        if: github.ref == 'refs/heads/main'
        run: |
          # H√§mta bucket-namnet direkt fr√•n CloudFormation
          TODO_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name todo-serverless-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TodoAppBucketName'].OutputValue" \
            --output text)

          # H√§mta CloudFront URL f√∂r anv√§ndare
          TODO_APP_URL=$(aws cloudformation describe-stacks \
            --stack-name todo-serverless-stack \
            --query "Stacks[0].Outputs[?OutputKey=='TodoAppUrl'].OutputValue" \
            --output text)

          echo "üì¶ Deploying TODO App to bucket: $TODO_BUCKET"

          # Uppdatera index.html med API URL
          API_URL="${{ steps.get-url.outputs.API_URL }}"
          sed -i "s|const API_URL = \".*\";|const API_URL = \"${API_URL}\";|g" todo-app/index.html

          # Synka till S3 med r√§tt content-types
          aws s3 sync ./todo-app/ s3://$TODO_BUCKET/ --delete \
            --content-type "text/html" \
            --exclude "*" \
            --include "*.html"

          echo "‚úÖ TODO App deployed successfully!"
          echo "üåê TODO App URL: $TODO_APP_URL"

      - name: Deploy Swagger UI to S3
        if: github.ref == 'refs/heads/main'
        run: |
          # H√§mta bucket-namnet direkt fr√•n CloudFormation
          SWAGGER_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name todo-serverless-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SwaggerBucketName'].OutputValue" \
            --output text)

          # H√§mta CloudFront URL f√∂r anv√§ndare
          SWAGGER_URL=$(aws cloudformation describe-stacks \
            --stack-name todo-serverless-stack \
            --query "Stacks[0].Outputs[?OutputKey=='SwaggerUrl'].OutputValue" \
            --output text)

          echo "üì¶ Deploying Swagger UI to bucket: $SWAGGER_BUCKET"

          # Uppdatera swagger-initializer.js med API URL
          API_URL="${{ steps.get-url.outputs.API_URL }}"
          sed -i "s|const API_URL = '.*';|const API_URL = '${API_URL}';|g" swagger-ui/swagger-initializer.js

          # Synka till S3 med r√§tt content-types
          aws s3 sync ./swagger-ui/ s3://$SWAGGER_BUCKET/ --delete \
            --content-type "text/html" \
            --exclude "*" \
            --include "*.html"

          aws s3 sync ./swagger-ui/ s3://$SWAGGER_BUCKET/ --delete \
            --content-type "application/javascript" \
            --exclude "*" \
            --include "*.js"

          echo "üìÑ Swagger UI deployed successfully!"
          echo "üåê Swagger URL: $SWAGGER_URL"

      - name: API Health Check
        if: github.ref == 'refs/heads/main'
        run: |
          API_URL="${{ steps.get-url.outputs.API_URL }}"
          sleep 10
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${API_URL}todos)
          
          if [ $HTTP_STATUS -eq 200 ] || [ $HTTP_STATUS -eq 404 ]; then
            echo "‚úÖ API is responding (HTTP $HTTP_STATUS)"
          else
            echo "‚ùå API health check failed (HTTP $HTTP_STATUS)"
            exit 1
          fi